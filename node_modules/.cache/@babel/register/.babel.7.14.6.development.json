{
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/vnext/Desktop/sakura-auto-scaling-/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/vnext/Desktop/sakura-auto-scaling-\",\"filename\":\"/Users/vnext/Desktop/sakura-auto-scaling-/index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/vnext/Desktop/sakura-auto-scaling-\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.14.6": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/vnext/Desktop/sakura-auto-scaling-/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/vnext/Desktop/sakura-auto-scaling-",
      "filename": "/Users/vnext/Desktop/sakura-auto-scaling-/index.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/vnext/Desktop/sakura-auto-scaling-",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/vnext/Desktop/sakura-auto-scaling-/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/vnext/Desktop/sakura-auto-scaling-/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/vnext/Desktop/sakura-auto-scaling-/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "const express = require(\"express\");\n\nconst fs = require(\"fs\");\n\nconst bodyParser = require('body-parser');\n\nconst app = express();\nconst port = \"8000\";\n\nconst shell = require('shelljs');\n/**\n * Routes Definitions\n */\n\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\napp.post(\"/\", (req, res) => {\n  const {\n    IP,\n    flag\n  } = req.body;\n  const fileHost = 'host.txt';\n  const ipReplace = `server ${IP};`;\n  let result = null;\n  fs.readFile(fileHost, 'utf8', function (err, data) {\n    if (err) return console.log(err);\n    if (flag) result = data.replace(ipReplace, '#no');else result = data.replace(/#no/g, ipReplace + '\\n #no');\n    console.log('result: ', result);\n    fs.writeFile(fileHost, result, 'utf8', function (err) {\n      if (err) return console.log(err);\n      shell.exec(\"sudo service nginx reload\");\n    });\n  });\n  res.status(200).send(\"SET HOST success\");\n});\n/**\n * Server Activation\n */\n\napp.listen(port, () => {\n  console.log(`Listening to requests on http://localhost:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwiZnMiLCJib2R5UGFyc2VyIiwiYXBwIiwicG9ydCIsInNoZWxsIiwidXNlIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInBvc3QiLCJyZXEiLCJyZXMiLCJJUCIsImZsYWciLCJib2R5IiwiZmlsZUhvc3QiLCJpcFJlcGxhY2UiLCJyZXN1bHQiLCJyZWFkRmlsZSIsImVyciIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwicmVwbGFjZSIsIndyaXRlRmlsZSIsImV4ZWMiLCJzdGF0dXMiLCJzZW5kIiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTUUsVUFBVSxHQUFHRixPQUFPLENBQUMsYUFBRCxDQUExQjs7QUFFQSxNQUFNRyxHQUFHLEdBQUdKLE9BQU8sRUFBbkI7QUFDQSxNQUFNSyxJQUFJLEdBQUcsTUFBYjs7QUFFQSxNQUFNQyxLQUFLLEdBQUdMLE9BQU8sQ0FBQyxTQUFELENBQXJCO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQUcsR0FBRyxDQUFDRyxHQUFKLENBQVFKLFVBQVUsQ0FBQ0ssSUFBWCxFQUFSO0FBQ0FKLEdBQUcsQ0FBQ0csR0FBSixDQUFRSixVQUFVLENBQUNNLFVBQVgsQ0FBc0I7QUFBRUMsRUFBQUEsUUFBUSxFQUFFO0FBQVosQ0FBdEIsQ0FBUjtBQUVBTixHQUFHLENBQUNPLElBQUosQ0FBUyxHQUFULEVBQWMsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDeEIsUUFBTTtBQUFFQyxJQUFBQSxFQUFGO0FBQU1DLElBQUFBO0FBQU4sTUFBZUgsR0FBRyxDQUFDSSxJQUF6QjtBQUNBLFFBQU1DLFFBQVEsR0FBRyxVQUFqQjtBQUNBLFFBQU1DLFNBQVMsR0FBSSxVQUFTSixFQUFHLEdBQS9CO0FBQ0EsTUFBSUssTUFBTSxHQUFHLElBQWI7QUFDQWpCLEVBQUFBLEVBQUUsQ0FBQ2tCLFFBQUgsQ0FBWUgsUUFBWixFQUFzQixNQUF0QixFQUE4QixVQUFVSSxHQUFWLEVBQWNDLElBQWQsRUFBb0I7QUFDOUMsUUFBSUQsR0FBSixFQUFTLE9BQU9FLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSCxHQUFaLENBQVA7QUFDVCxRQUFJTixJQUFKLEVBQVVJLE1BQU0sR0FBR0csSUFBSSxDQUFDRyxPQUFMLENBQWFQLFNBQWIsRUFBd0IsS0FBeEIsQ0FBVCxDQUFWLEtBQ01DLE1BQU0sR0FBR0csSUFBSSxDQUFDRyxPQUFMLENBQWEsTUFBYixFQUFzQlAsU0FBUyxHQUFHLFFBQWxDLENBQVQ7QUFDTkssSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksVUFBWixFQUF3QkwsTUFBeEI7QUFDQWpCLElBQUFBLEVBQUUsQ0FBQ3dCLFNBQUgsQ0FBYVQsUUFBYixFQUF1QkUsTUFBdkIsRUFBK0IsTUFBL0IsRUFBdUMsVUFBVUUsR0FBVixFQUFlO0FBQ2xELFVBQUlBLEdBQUosRUFBUyxPQUFPRSxPQUFPLENBQUNDLEdBQVIsQ0FBWUgsR0FBWixDQUFQO0FBQ1RmLE1BQUFBLEtBQUssQ0FBQ3FCLElBQU4sQ0FBVywyQkFBWDtBQUNILEtBSEQ7QUFJSCxHQVREO0FBVUFkLEVBQUFBLEdBQUcsQ0FBQ2UsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCLGtCQUFyQjtBQUNILENBaEJEO0FBa0JBO0FBQ0E7QUFDQTs7QUFFQXpCLEdBQUcsQ0FBQzBCLE1BQUosQ0FBV3pCLElBQVgsRUFBaUIsTUFBTTtBQUNuQmtCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLDZDQUE0Q25CLElBQUssRUFBOUQ7QUFDSCxDQUZEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy92bmV4dC9EZXNrdG9wL3Nha3VyYS1hdXRvLXNjYWxpbmctLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IHBvcnQgPSBcIjgwMDBcIjtcblxuY29uc3Qgc2hlbGwgPSByZXF1aXJlKCdzaGVsbGpzJyk7XG4vKipcbiAqIFJvdXRlcyBEZWZpbml0aW9uc1xuICovXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKTtcblxuYXBwLnBvc3QoXCIvXCIsIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHsgSVAsIGZsYWcgfSA9IHJlcS5ib2R5O1xuICAgIGNvbnN0IGZpbGVIb3N0ID0gJ2hvc3QudHh0J1xuICAgIGNvbnN0IGlwUmVwbGFjZSA9IGBzZXJ2ZXIgJHtJUH07YFxuICAgIGxldCByZXN1bHQgPSBudWxsXG4gICAgZnMucmVhZEZpbGUoZmlsZUhvc3QsICd1dGY4JywgZnVuY3Rpb24gKGVycixkYXRhKSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICBpZiAoZmxhZykgcmVzdWx0ID0gZGF0YS5yZXBsYWNlKGlwUmVwbGFjZSwgJyNubycpO1xuICAgICAgICAgZWxzZSByZXN1bHQgPSBkYXRhLnJlcGxhY2UoLyNuby9nICwgaXBSZXBsYWNlICsgJ1xcbiAjbm8nKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3Jlc3VsdDogJywgcmVzdWx0KVxuICAgICAgICBmcy53cml0ZUZpbGUoZmlsZUhvc3QsIHJlc3VsdCwgJ3V0ZjgnLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIHNoZWxsLmV4ZWMoXCJzdWRvIHNlcnZpY2UgbmdpbnggcmVsb2FkXCIpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKFwiU0VUIEhPU1Qgc3VjY2Vzc1wiKTtcbn0pO1xuXG4vKipcbiAqIFNlcnZlciBBY3RpdmF0aW9uXG4gKi9cblxuYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coYExpc3RlbmluZyB0byByZXF1ZXN0cyBvbiBodHRwOi8vbG9jYWxob3N0OiR7cG9ydH1gKTtcbn0pO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "express",
        "require",
        "fs",
        "bodyParser",
        "app",
        "port",
        "shell",
        "use",
        "json",
        "urlencoded",
        "extended",
        "post",
        "req",
        "res",
        "IP",
        "flag",
        "body",
        "fileHost",
        "ipReplace",
        "result",
        "readFile",
        "err",
        "data",
        "console",
        "log",
        "replace",
        "writeFile",
        "exec",
        "status",
        "send",
        "listen"
      ],
      "mappings": "AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAD,CAA1B;;AAEA,MAAMG,GAAG,GAAGJ,OAAO,EAAnB;AACA,MAAMK,IAAI,GAAG,MAAb;;AAEA,MAAMC,KAAK,GAAGL,OAAO,CAAC,SAAD,CAArB;AACA;AACA;AACA;;;AACAG,GAAG,CAACG,GAAJ,CAAQJ,UAAU,CAACK,IAAX,EAAR;AACAJ,GAAG,CAACG,GAAJ,CAAQJ,UAAU,CAACM,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AAEAN,GAAG,CAACO,IAAJ,CAAS,GAAT,EAAc,CAACC,GAAD,EAAMC,GAAN,KAAc;AACxB,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAeH,GAAG,CAACI,IAAzB;AACA,QAAMC,QAAQ,GAAG,UAAjB;AACA,QAAMC,SAAS,GAAI,UAASJ,EAAG,GAA/B;AACA,MAAIK,MAAM,GAAG,IAAb;AACAjB,EAAAA,EAAE,CAACkB,QAAH,CAAYH,QAAZ,EAAsB,MAAtB,EAA8B,UAAUI,GAAV,EAAcC,IAAd,EAAoB;AAC9C,QAAID,GAAJ,EAAS,OAAOE,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAAP;AACT,QAAIN,IAAJ,EAAUI,MAAM,GAAGG,IAAI,CAACG,OAAL,CAAaP,SAAb,EAAwB,KAAxB,CAAT,CAAV,KACMC,MAAM,GAAGG,IAAI,CAACG,OAAL,CAAa,MAAb,EAAsBP,SAAS,GAAG,QAAlC,CAAT;AACNK,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,MAAxB;AACAjB,IAAAA,EAAE,CAACwB,SAAH,CAAaT,QAAb,EAAuBE,MAAvB,EAA+B,MAA/B,EAAuC,UAAUE,GAAV,EAAe;AAClD,UAAIA,GAAJ,EAAS,OAAOE,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAAP;AACTf,MAAAA,KAAK,CAACqB,IAAN,CAAW,2BAAX;AACH,KAHD;AAIH,GATD;AAUAd,EAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB;AACH,CAhBD;AAkBA;AACA;AACA;;AAEAzB,GAAG,CAAC0B,MAAJ,CAAWzB,IAAX,EAAiB,MAAM;AACnBkB,EAAAA,OAAO,CAACC,GAAR,CAAa,6CAA4CnB,IAAK,EAA9D;AACH,CAFD",
      "sourceRoot": "/Users/vnext/Desktop/sakura-auto-scaling-/",
      "sourcesContent": [
        "const express = require(\"express\");\nconst fs = require(\"fs\");\nconst bodyParser = require('body-parser');\n\nconst app = express();\nconst port = \"8000\";\n\nconst shell = require('shelljs');\n/**\n * Routes Definitions\n */\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\napp.post(\"/\", (req, res) => {\n    const { IP, flag } = req.body;\n    const fileHost = 'host.txt'\n    const ipReplace = `server ${IP};`\n    let result = null\n    fs.readFile(fileHost, 'utf8', function (err,data) {\n        if (err) return console.log(err);\n        if (flag) result = data.replace(ipReplace, '#no');\n         else result = data.replace(/#no/g , ipReplace + '\\n #no');\n        console.log('result: ', result)\n        fs.writeFile(fileHost, result, 'utf8', function (err) {\n            if (err) return console.log(err);\n            shell.exec(\"sudo service nginx reload\")\n        });\n    });\n    res.status(200).send(\"SET HOST success\");\n});\n\n/**\n * Server Activation\n */\n\napp.listen(port, () => {\n    console.log(`Listening to requests on http://localhost:${port}`);\n});\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1626105800758
  }
}